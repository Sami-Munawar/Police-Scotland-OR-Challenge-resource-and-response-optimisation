export declare type num = number;
export declare type unit = number;
export declare const PI: number;
declare class NumbaFactory {
    private get val();
    pow(x: number): number;
    powNorm(x: num, ceiling: num): number;
    powSign(x: num): number;
    get abs(): number;
    get sign(): 0 | 1 | -1;
    log(base?: number): number;
    get sin(): number;
    get cos(): number;
    get hyperSin(): number;
    get aHyperSin(): number;
    get floor(): number;
    get floorLeftover(): number;
    get ceil(): number;
    get round(): number;
    rough(precision?: number): number;
    add(x: num): number;
    sub(x: num): number;
    mul(x: num): number;
    div(x: num): number;
    get freq2bark(): number;
    get bark2freq(): number;
    get note2freq(): number;
    get freq2note(): number;
    magnitudeSq(other: num): number;
    magnitude(other: num): number;
    get exp(): number;
    mix(a: num, b: num): number;
    clamp(a: num, b: num): number;
    unMix(a: num, b: num): number;
    remix(fromStart: num, fromEnd: num, toStart: num, toEnd: num): number;
    get isInteger(): boolean;
    get isPowOf2(): boolean;
    get powOf2Above(): number;
    get powOf2Below(): number;
    toFixedExp(digits?: number): string;
}
export declare class Numba {
    static includeMe(): string;
}
declare global {
    interface Number extends NumbaFactory {
    }
}
export declare function testNumba(): void;
export {};
